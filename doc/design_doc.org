* URL Shortener Design Document

** Context and scope
   Team:    Alexander, Yaroslav.
   Scope:   University assignment.
   Project: URL shortener service

   The service will allow users to create shorter links and use them instead
   of original ones. After link was created, anyone can use it through
   this service.
   Because this is a university assignment, service will not exhibit any
   complex behaviour and instead will do the bare minimum, namely:
     * registration
     * {un}authentication
     * creation of short links
     * deletion of short links
     * redirection to the original links
     * own KV(?)-storage

*** Optimisations and restrictions
    + Taking into account the absence of e-mail verification, it was decided
      to simplify it a bit and allow to use any valid [a-Z0-9]+ string as
      a username instead of e-mail.

    + Length of username and password is limited to $MAX_UNAME
      $MAX_PW chars. Length of link is limited to $MAX_LINK.
      #+begin_src sh
        # size in bytes
        MAX_UNAME=32
        MAX_PW   =32
        MAX_LINK =1024
      #+end_src

    + Max number of users - 255, sorry not sorry :(
      This derives from `UUID` datatype.

** Goals and non-goals
   The following goals (in somewhat of modified state)
   derive from [[https:https://docs.google.com/document/d/1RIQWpiXRuxUmI_VhMZjo-UgxMxjEIXIpC2tmMY_ZpuE][this]] specification.
***** Snapshot
      [[file:specification_foreign_2021_02_18_21_40_37.pdf][specification.pdf]] downloaded at [2021-02-18 21:40]


*** Goals
    - User registration
    - User authentication
    - Shortened URLs'  storage
    - Registered users storage
    - Creation and deletion of shortened URLs
    - Url validation before
    - Redirection to the original URL using shortened version
*** Non-goals
    - E-mail verification / providing valid e-mail
    - Complex user actions (user data management, password changing, etc...)
    - UI/GUI/TUI/CLI
    - ...

** Architecture and Design

*** Structs
   <<sec:structs>>

    #+begin_src haskell
      type UUID = Word8

      data User = User
        { id       :: UUID -- ^ unique ID       -- PK
        , username :: Text -- ^ user's username -- Unique
        , hash     :: Text -- ^ password hash
        }

      data Url = Url
        { id    :: UUID -- ^ unique ID                -- PK
        , orig  :: Text -- ^ original url
        , short :: Text -- ^ shortened version of url -- Unique
        , user  :: User -- ^ user that created a link -- FK user(id)
        }
    #+end_src

*** JWT tokens
     #+begin_src haskell
       data Token = Token
         { secret   :: Text
         , username :: Text -- ^ user's username
         }
     #+end_src

*** Dependencies
    - _servant_ =web-server=
    - _colog_   =logger=

*** System-context-diagram
    [[file:arch.png]]

*** API
    Main API specification: [[file:openapi.yaml]]

    + Would be nice to add 409 Conflict (or any other more suitable code)
      in /users/signup, when username already exists.

*** Data Storage
    There are gonna be two tables a.k.a. files:
    - users
    - shortened links

    Their representation is quiet the same as [[sec:structs][datatypes]] in haskell.
***** TODO replace with their /actual/ representation.

***** TODO describe an algorithm of traversing through the DB
      Probably it's gonna be a RB-tree, but need to think about
      the implementation part.

**** Common Workflows
     - insert new user
     - retrieve user credentials
     - generate UUID for new link
     - insert link
     - delete link
